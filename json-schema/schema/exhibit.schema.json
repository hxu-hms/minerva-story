{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Exhibit",
  "description": "An exhibit for display in Minerva Story",
  "type": "object",
  "definitions": {
    "image": {
      "description": "Specification of an image pyramid",
      "type": "object",
      "properties": {
        "Name": {
          "description": "ID of the image pyramid, unique within the exhibit",
          "type": "string"
        },
        "Description": {
          "description": "A single line of text to render above the image pyramid",
          "type": "string"
        },
        "Path": {
          "description": "An absolute or relative URL to the root of an image pyramid",
          "type": "string"
        },
        "Width": {
          "description": "The full resolution horizontal width of the image in pixels",
          "exclusiveMinimum": 1,
          "type": "integer"
        },
        "Height": {
          "description": "The full resolution vertical height of the image in pixels",
          "exclusiveMinimum": 1,
          "type": "integer"
        },
        "MaxLevel": {
          "description": "The maximum number of times the image has been downsampled by 2",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "Name",
        "Description",
        "Path",
        "Width",
        "Height",
        "MaxLevel"
      ]
    },
    "group": {
      "description": "Specification of a marker group",
      "type": "object",
      "properties": {
        "Name": {
          "description": "ID of the marker group, unique within the exhibit",
          "type": "string"
        },
        "Path": {
          "description": "URI component immediately following the root of an image pyramid",
          "type": "string"
        },
        "Colors": {
          "$ref": "#/definitions/colors"
        },
        "Channels": {
          "$ref": "#/definitions/channels"
        }
      },
      "required": [
        "Name",
        "Path",
        "Colors",
        "Channels"
      ]
    },
    "mask": {
      "description": "Specification of a segmentation mask",
      "type": "object",
      "properties": {
        "Name": {
          "description": "ID of the segmentation mask, unique within the exhibit",
          "type": "string"
        },
        "Path": {
          "description": "URI component immediately following the root of an image pyramid",
          "type": "string"
        },
        "Colors": {
          "$ref": "#/definitions/colors"
        },
        "Channels": {
          "$ref": "#/definitions/channels"
        }
      },
      "required": [
        "Name",
        "Path",
        "Colors",
        "Channels"
      ]
    },
    "colors": {
      "description": "Ordered list of colors, of the same length as channels",
      "type": "array",
      "items": {
        "description": "Hex string identifying 3-byte RGB color used to render channel",
        "type": "string"
      },
      "minItems": 1
    },
    "channels": {
      "description": "Ordered list of channels, of the same length as colors",
      "type": "array",
      "items": {
        "description": "Short Label to describe the contents of the channel",
        "type": "string"
      },
      "minItems": 1
    },
    "story": {
      "description": "Specification of a story",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the story",
          "type": "string"
        },
        "Waypoints": {
          "description": "List of waypoints for the story",
          "type": "array",
          "item": {
            "$ref": "./waypoint.schema.json"
          }
        }
      },
      "required": [
        "Name",
        "Waypoints"
      ]
    }
  },
  "properties": {
    "Name": {
      "description": "Name of the exhibit",
      "type": "string"
    },
    "Header": {
      "description": "A markdown string to render above the table of contents",
      "type": "string"
    },
    "3D": {
      "description": "Each marker group will be treated as a sequential z-slice if 3D is true",
      "type": "boolean"
    },
    "zPerMicron": {
      "description": "The number of z-slices in a micron when rendering the scale bar",
      "minimum": 1,
      "type": "integer"
    },
    "PixelsPerMicron": {
      "description": "The number of pixels in a micron when rendering the scale bar",
      "exclusiveMinimum": 0,
      "type": "number"
    },
    "Images": {
      "description": "List of image pyramid specifications",
      "type": "array",
      "items": {
        "$ref": "#/definitions/image"
      },
      "minItems": 1
    },
    "Layout": {
      "description": "How multiple images should be aranged",
      "type": "object",
      "properties": {
        "Grid": {
          "description": "List of rows of image pyramid IDs in a 2d grid",
          "type": "array",
          "items": {
            "description": "A row of image pyramid IDs in a 2d grid",
            "type": "array",
            "items": {
              "description": "ID of an image pyramid, unique within the exhibit",
              "type": "string"
            }
          }
        }
      },
      "required": [ "Grid" ]
    },
    "FirstGroup": {
      "description": "ID of a marker group to render if no waypoints exist",
      "type": "string"
    },
    "DefaultGroup": {
      "description": "ID of a marker group to render when masks are activated",
      "type": "string"
    },
    "Groups": {
      "description": "List of marker group specifications",
      "type": "array",
      "items": {
        "$ref": "#/definitions/group"
      },
      "minItems": 1
    },
    "Masks": {
      "description": "List of segmentation mask specifications",
      "type": "array",
      "items": {
        "$ref": "#/definitions/mask"
      },
      "minItems": 1
    },
    "Stories": {
      "description": "List of story specifications",
      "type": "array",
      "items": {
        "$ref": "#/definitions/story"
      },
      "minItems": 1
    }
  },
  "required": [
    "Name",
    "Images",
    "Layout",
    "Groups"
  ]
}
